#include <stdio.h>
#include <stdlib.h>
//this program should play a chess game with another player based on
//the board
/** some information about the program
* functions : -1) prtboard :print the currenct board
             - 2) init     :initilize the board to the first state
             - 3) score    :return the difference in score of the board .output>0 means white winning
               output<0 means black is winning
             - 4) turn     :return whose turn it is now
main function 5) best_move:moves the player the best move (return the max-min score that results
                        of this move)
              6) psblemv  :return a pointer and the length to an array which contains all
                        possible moves for all pieces for the player.return null and 0 if it
                        is check mate
              7) check    :return 1 -the king is attacked ,0 -the king it not attacked
              8) pmoves   :gets a piece and return pointer and length to all the moves possible
                        must include transforming pawn,double attack ,fork,sheltering the king
              9) move     :moves a specified piece to a specified place on board
* variables : 1)- board    :global 2 -dimintional array(matrix) 8*8 type int
                        where :white pieces are positive ,black pieces are negative,empty squares
                        are 0.
                        pawn =|1|
                        knight=bishop=|3|
                        rook=|5|
                        queen=|9|
                        king=|1000|
             - 2) pieces   :enum variable for the pieces of the game
             - 3) (turn)   :static int used for the turn function
             - 4) steps    :#define for the number of steps that the program compute
**/
#define STEPS 5
typedef enum {WPAWN=1,BPAWN=-1,WKNIGHT=4,BKNIGHT=-4,WBISHOP=3,BBISHOP=-3,\
WROOK=5,BROOK=-5,WQUEEN=9,BQUEEN=-9,WKING=100,BKING=-100,SQUARE=0}pieces;
typedef enum{WHITE=1,BLACK=-1}player;
 typedef struct move
 {
 int inr,inc,outr,outc,specialmove;
 /*specialmove  if the pawn need to change to other pieces according to it's value if it is -1 then it is not pawn*/
 }move;
int board[8][8];
int spccase[8]={-1,-1,0,0,0,0,0,0};//row,col,white long castling,short castling,black long castling,short castling,50+ draw ,cloning
/* i,j for pawn special moves,long,short castling for white and black  ,last two for special tie cases
* first to cloning the other player and second for the 50 moves in the last game
* the case where no move it available is else where */
void init();
void prtboard();
int options(player,move**);
int check(player);
int turn()
{
static int t=-1;
return t*=-1;
}
int score();
/*######################*/
int main()
{
   move* p;
   board[4][3]=WPAWN;
   prtboard();
   printf("%d\n",options(WHITE,&p));
   printf("inr=%d inc=%d outr=%d outc=%d\n",p[0].inr,p[0].inc,p[0].outr,p[0].outc);
return 0;
}
/*######################*/
void init()
{
board[0][0]=WROOK;
board[0][7]=WROOK;
board[0][1]=WKNIGHT;
board[0][6]=WKNIGHT;
board[0][2]=WBISHOP;
board[0][5]=WBISHOP;
board[0][4]=WKING;
board[0][3]=WQUEEN;
for(int i=1;i<7;i++)
    {
     for(int j=0;j<8;j++)
       switch(i)
       {
       case 1:board[i][j]=WPAWN;
              break;
       case 6:board[i][j]=BPAWN;
              break;
       default:board[i][j]=SQUARE;
              break;
       }
    }
board[7][0]=BROOK;
board[7][7]=BROOK;
board[7][1]=BKNIGHT;
board[7][6]=BKNIGHT;
board[7][2]=BBISHOP;
board[7][5]=BBISHOP;
board[7][4]=BKING;
board[7][3]=BQUEEN;
}
void prtboard()
{
printf("+-+--+--+--+--+--+--+--+--+\n");
for(int i=7;i>-1;i--)
    {
        printf("|%d|",i+1);
    for(int j=0;j<8;j++)
        {
        switch(board[i][j])
        {
        case 1:printf("wp"); break;
        case -1:printf("bp"); break;
        case 3:printf("wB"); break;
        case -3:printf("bB"); break;
        case 4:printf("wK"); break;
        case -4:printf("bK"); break;
        case 5:printf("wR"); break;
        case -5:printf("bR"); break;
        case 9:printf("WQ"); break;
        case -9:printf("BQ"); break;
        case 100:printf("WK"); break;
        case -100:printf("BK"); break;
        case 0:printf("  "); break;
        }
        printf("|");
        }
    printf("\n+-+--+--+--+--+--+--+--+--+\n");
    }
 printf("|O|A |B |C |D |E |F |G |H |\n");
}
int score()
{
    int scre=0;
for(int i=0;i<8;i++)
for(int j=0;j<8;j++)
    {
     switch(board[i][j])
     {
      case 4:scre+=3; break;
      case -4:scre-=3; break;
      default: scre+=board[i][j];break;
     }
    }
    return scre;
}
int options(player p,move** list)
{
int i,j,len=0,tmp,insert=0,c=0;
insert_gate:
if(p==WHITE)
    {
    if(spccase[2]==1)
      {
           if(!insert)len++;
        else
        {(*list)[c].inc=4; (*list)[c].inr=0; (*list)[c].outc=2; (*list)[c].outr=0; (*list)[c].specialmove=-1; c++;}
      }
    if(spccase[3]==1)
       {
          if(!insert)len++;
        else
        {(*list)[c].inc=4; (*list)[c].inr=0; (*list)[c].outc=6; (*list)[c].outr=0; (*list)[c].specialmove=-1; c++;}
       }
    }
if(p==BLACK)
    {
    if(spccase[4]==1)
      {
           if(!insert)len++;
        else
        {(*list)[c].inc=4; (*list)[c].inr=7; (*list)[c].outc=2; (*list)[c].outr=7; (*list)[c].specialmove=-1; c++;}
      }
    if(spccase[5]==1)
       {
          if(!insert)len++;
        else
        {(*list)[c].inc=4; (*list)[c].inr=7; (*list)[c].outc=6; (*list)[c].outr=7; (*list)[c].specialmove=-1; c++;}
       }
    }//asks for the castling
for(i=0;i<8;i++)
{
    for(j=0;j<8;j++)
    {
        if(board[i][j]*p<=0)//means it is enemy or empty square
            continue;
        switch(board[i][j])
        {
        case BPAWN:
        case WPAWN: if((i+p)%7==0)//the pawn is on the other side
                        {
                            if(board[(i+p)][j]==SQUARE)
                                 {
                                  if(!insert)len+=4;
                                else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+p; (*list)[c].outc=j; (*list)[c].specialmove=WKNIGHT*p; c++;//knight
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+p; (*list)[c].outc=j; (*list)[c].specialmove=WBISHOP*p; c++;//bishop
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+p; (*list)[c].outc=j; (*list)[c].specialmove=WROOK*p; c++;//rook
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+p; (*list)[c].outc=j; (*list)[c].specialmove=WQUEEN*p; c++;//queen
                                }
                                 }
                            if(j<7 &&board[(i+p)][j+1]*p<0)//if the right square is enemy
                                {
                                  if(!insert)len+=4;
                                else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+p; (*list)[c].outc=j+1; (*list)[c].specialmove=WKNIGHT*p; c++;//knight
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+p; (*list)[c].outc=j+1; (*list)[c].specialmove=WBISHOP*p; c++;//bishop
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+p; (*list)[c].outc=j+1; (*list)[c].specialmove=WROOK*p; c++;//rook
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+p; (*list)[c].outc=j+1; (*list)[c].specialmove=WQUEEN*p; c++;//queen
                                }
                                 }
                            if(j>0 &&board[(i+p)][j-1]*p<0)//if the left square is enemy
                                {
                                  if(!insert)len+=4;
                                else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+p; (*list)[c].outc=j-1; (*list)[c].specialmove=WKNIGHT*p; c++;//knight
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+p; (*list)[c].outc=j-1; (*list)[c].specialmove=WBISHOP*p; c++;//bishop
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+p; (*list)[c].outc=j-1; (*list)[c].specialmove=WROOK*p; c++;//rook
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+p; (*list)[c].outc=j-1; (*list)[c].specialmove=WQUEEN*p; c++;//queen
                                }
                                 }
                        }
                        else
                        {
                        if(i%7!=0 && board[i+p][j]==SQUARE)//can move one square 'forward'
                            {
                            if(!insert)len++;
                            else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+p; (*list)[c].outc=j; (*list)[c].specialmove=-1; c++;
                                }
                            }
						//warning if the pawn is on the first raw of his side this will not count him
                        if(j<7 && board[i+p][j+1]*p<0)//can eat to the right
                           {
                            if(!insert)len++;
                            else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+p; (*list)[c].outc=j+1; (*list)[c].specialmove=-1; c++;
                                }
                            }
                        if(j>0 && board[i+p][j-1]*p<0)//can eat to the left
                            {
                            if(!insert)len++;
                            else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+p; (*list)[c].outc=j-1; (*list)[c].specialmove=-1; c++;
                                }
                            }
                        if((i-p)%7==0)//the pawn is on his initial square
                            {
                            if(board[i+p][j]==SQUARE && board[i+2*p][j]==SQUARE)//can move 2 squares
                               {
                                if(!insert)len++;
                                 else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+2*p; (*list)[c].outc=j; (*list)[c].specialmove=-1; c++;
                                }
                               }
                            }
                        if(2*i-p==7)//if white is on row 4 or black on row 3 for potential special move
                            {
                            if(i+p==spccase[0] && (j-spccase[1]==1 || spccase[1]-j==1))
                               {
                               if(!insert)len++;
                                else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+p; (*list)[c].outc=spccase[1]; (*list)[c].specialmove=-1; c++;
                                //specialmove is -1 because he did not change value
                                }
                               }
                            }
                        }
                    break;

        case BROOK:
        case WROOK: queen_gate0: tmp=i-1;
                    while(tmp>-1)//bottom side
                        {
                        if(board[tmp][j]==SQUARE)
                            {
                            if(!insert)len++;
                                 else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=tmp; (*list)[c].outc=j; (*list)[c].specialmove=-1; c++;
                                }
                            tmp--; continue;
                            }
                        if(board[tmp][j]*p<0)//first enemy
                            {
                                if(!insert)len++;
                                 else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=tmp; (*list)[c].outc=j; (*list)[c].specialmove=-1; c++;
                                }
                            }
                        break;
                        }
                    tmp=i+1;
                    while(tmp<8)//upper side
                        {
                        if(board[tmp][j]==SQUARE)
                            {
                            if(!insert)len++;
                                 else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=tmp; (*list)[c].outc=j; (*list)[c].specialmove=-1; c++;
                                }
                            tmp++; continue;
                            }
                        if(board[tmp][j]*p<0)//first enemy
                            {
                                if(!insert)len++;
                                 else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=tmp; (*list)[c].outc=j; (*list)[c].specialmove=-1; c++;
                                }
                            }
                        break;
                        }
                    tmp=j-1;
                    while(tmp>-1)//left side
                    {
                    if(board[i][tmp]==SQUARE)
                        {
                            if(!insert)len++;
                                 else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i; (*list)[c].outc=tmp; (*list)[c].specialmove=-1; c++;
                                }
                            tmp--; continue;
                        }
                    if(board[i][tmp]*p<0)
                      {
                           if(!insert)len++;
                                 else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i; (*list)[c].outc=tmp; (*list)[c].specialmove=-1; c++;
                                }
                      }
                    break;
                    }
                    tmp=j+1;
                    while(tmp<8)//the right side
                    {
                    if(board[i][tmp]==SQUARE)
                        {
                            if(!insert)len++;
                                 else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i; (*list)[c].outc=tmp; (*list)[c].specialmove=-1; c++;
                                }
                            tmp++; continue;
                        }
                    if(board[i][tmp]*p<0)
                      {
                           if(!insert)len++;
                                 else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i; (*list)[c].outc=tmp; (*list)[c].specialmove=-1; c++;
                                }
                      }
                    break;
                    }
					if(board[i][j]==WQUEEN*p)//check if white or black queen
					  goto queen_gate1;
                    break;
        case BKNIGHT:
        case WKNIGHT: if(i+2<8)//the two upper squares
                        {
                            if(j+1<8 &&(board[i+2][j+1]*p<=0))//not a friend
                                {
                                if(!insert)len++;
                                else
                                  {
                                      (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+2; (*list)[c].outc=j+1; (*list)[c].specialmove=-1; c++;
                                  }
                                }
                            if(j-1>-1&&(board[i+2][j-1]*p<=0))
                                {
                                if(!insert)len++;
                                else
                                  {
                                      (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+2; (*list)[c].outc=j-1; (*list)[c].specialmove=-1; c++;
                                  }
                                }
                        }
                      if(i-2>-1)//the two bottom squares
                      {
                          if(j+1<8 &&(board[i-2][j+1]*p<=0))//not a friend
                                {
                                if(!insert)len++;
                                else
                                  {
                                      (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i-2; (*list)[c].outc=j+1; (*list)[c].specialmove=-1; c++;
                                  }
                                }
                          if(j-1>-1&&(board[i-2][j-1]*p<=0))
                                {
                                if(!insert)len++;
                                else
                                  {
                                      (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i-2; (*list)[c].outc=j-1; (*list)[c].specialmove=-1; c++;
                                  }
                                }
                      }
                      if(j+2<8)//the two right squares squares
                        {
                            if(i+1<8 &&(board[i+1][j+2]*p<=0))//not a friend
                                {
                                if(!insert)len++;
                                else
                                  {
                                      (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+1; (*list)[c].outc=j+2; (*list)[c].specialmove=-1; c++;
                                  }
                                }
                            if(i-1>-1&&(board[i-1][j+2]*p<=0))
                                {
                                if(!insert)len++;
                                else
                                  {
                                      (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i-1; (*list)[c].outc=j+2; (*list)[c].specialmove=-1; c++;
                                  }
                                }
                        }
                      if(j-2>-1)//the two left squares squares
                        {
                           if(i+1<8 &&(board[i+1][j+2]*p<=0))//not a friend
                                {
                                if(!insert)len++;
                                else
                                  {
                                      (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i+1; (*list)[c].outc=j-2; (*list)[c].specialmove=-1; c++;
                                  }
                                }
                            if(i-1>-1&&(board[i-1][j+2]*p<=0))
                                {
                                if(!insert)len++;
                                else
                                  {
                                      (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=i-1; (*list)[c].outc=j-2; (*list)[c].specialmove=-1; c++;
                                  }
                                }
                        }
                        break;
		case BBISHOP:
		case WBISHOP: queen_gate1:
					  tmp=i+1;
					  while(tmp<8 && j+tmp-i<8)//right-upper diaginal
					  {

						 if(board[tmp][j+tmp-i]==SQUARE)
						   {
                            if(!insert)len++;
                                 else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=tmp; (*list)[c].outc=j+tmp-i; (*list)[c].specialmove=-1; c++;
                                }
                            tmp++; continue;
                           }
						 if(board[tmp][j+tmp-i]*p<0)
							 {
                            if(!insert)len++;
                                 else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=tmp; (*list)[c].outc=j+tmp-i; (*list)[c].specialmove=-1; c++;
                                }
							 }
						 break;
					  }
					  tmp=i+1;
					  while(tmp<8 && j-tmp+i>-1)//left-upper diaginal
					  {
						 if(board[tmp][j+i-tmp]==SQUARE)
						 {
						      if(!insert)len++;
                                 else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=tmp; (*list)[c].outc=j-tmp+i; (*list)[c].specialmove=-1; c++;
                                }
						     tmp++; continue;
                         }
						 if(board[tmp][j+i-tmp]*p<0)
							{
							  if(!insert)len++;
                                 else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=tmp; (*list)[c].outc=j-tmp+i; (*list)[c].specialmove=-1; c++;
                                }
							}
						 break;
					  }
					  tmp=i-1;
					  while(tmp>-1 && j+tmp-i>-1)//left-bottom diaginal
					  {
						if(board[tmp][j+tmp-i]==SQUARE)
						 {
						      if(!insert)len++;
                                 else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=tmp; (*list)[c].outc=j+tmp-i; (*list)[c].specialmove=-1; c++;
                                }
						     tmp--; continue;
                         }
						 if(board[tmp][j+tmp-i]*p<0)
							{
							  if(!insert)len++;
                                 else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=tmp; (*list)[c].outc=j+tmp-i; (*list)[c].specialmove=-1; c++;
                                }
							}
						 break;
					  }
					  tmp=i-1;
					  while(tmp>-1 && j-tmp+i<8)//right-bottom diaginal
					  {

						 if(board[tmp][j-tmp+i]==SQUARE)
						 {
						      if(!insert)len++;
                                 else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=tmp; (*list)[c].outc=j-tmp+i; (*list)[c].specialmove=-1; c++;
                                }
						     tmp--; continue;
                         }
						 if(board[tmp][j-tmp+i]*p<0)
							 {
							  if(!insert)len++;
                                 else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=tmp; (*list)[c].outc=j-tmp+i; (*list)[c].specialmove=-1; c++;
                                }
							}
						 break;
					  }
					 break;
		case BQUEEN:
		case WQUEEN: //will use goto statments
						goto queen_gate0;
		case BKING:
		case WKING: for(int k=i-1;k<=i+1;k++)
						for(int l=j-1;l<=j+1;l++)
						{
							if(k<0 || k>7 || l<0 || l>7) continue;
							if(board[k][l]*p<=0)//not a friend
							  {
                                if(!insert)len++;
                                 else
                                {
                                (*list)[c].inr=i; (*list)[c].inc=j; (*list)[c].outr=k; (*list)[c].outc=l; (*list)[c].specialmove=-1; c++;
                                }
							  }
						}
					break;
        }
    }
}
 if(!insert)//making array
 {
     *list=malloc(len*sizeof(move));
     insert=1;
     goto insert_gate;
 }
return len;
}
int check(player p)
{
    int kingr,kingc,i,j;
    for(i=0;i<8;i++)
        for(j=0;j<8;j++)
            if(board[i][j]==WKING*p)
    {
        kingr=i;
        kingc=j;
        break;
    }
    if(kingr+2<8)//KNIGHT
    {
       if(kingc+1<8 &&(board[kingr+2][kingc+1]*p==BKNIGHT))//not a friend
           return 1;
       if(kingc-1>-1&&(board[kingr+2][kingc-1]*p==BKNIGHT))
           return 1;
    }
     if(kingr-2>-1)//KNIGHT
     {
         if(kingc+1<8 &&(board[kingr-2][kingc+1]*p==BKNIGHT))//not a friend
              return 1;
         if(kingc-1>-1&&(board[kingr-2][kingc-1]*p==BKNIGHT))
               return 1;
     }
     if(kingc+2<8)//KNIGHT
       {
           if(kingr+1<8 &&(board[kingr+1][kingc+2]*p==BKNIGHT))//not a friend
               return 1;
           if(kingr-1>-1&&(board[kingr-1][kingc+2]*p==BKNIGHT))
               return 1;
       }
     if(kingc-2>-1)//KNIGHT
       {
          if(kingr+1<8 &&(board[kingr+1][kingc-2]*p==BKNIGHT))//not a friend
               return 1;
           if(kingr-1>-1&&(board[kingr-1][kingc-2]*p==BKNIGHT))
               return 1;
       }
 i=kingr-1; //ROOK AND QUEEN
while(i>-1)//bottom side
       {
       if(board[i][kingc]==SQUARE)
           {
           i--; continue;
           }
       if(board[i][kingc]*p==BROOK ||board[i][kingc]*p==BQUEEN)//first enemy
           return 1;
       break;
       }
   i=kingr+1;
   while(i<8)//upper side
       {
       if(board[i][kingc]==SQUARE)
           {
           i++; continue;
           }
       if(board[i][kingc]*p==BROOK ||board[i][kingc]*p==BQUEEN)//first enemy
           return 1;
       break;
       }
   i=kingc-1;
   while(i>-1)//left side
   {
   if(board[kingr][i]==SQUARE)
       {
        i--; continue;
       }
   if(board[kingr][i]*p==BROOK || board[kingr][i]*p==BQUEEN)
       return 1;
   break;
   }
   i=kingc+1;
   while(i<8)//the right side
   {
   if(board[kingr][i]==SQUARE)
       {
           i++; continue;
       }
   if(board[kingr][i]*p==BROOK || board[kingr][i]*p==BQUEEN)
      return 1;
   break;
   }
 j=kingr+1; //BISHOP AND QUEEN
  while(j<8 && kingc+j-kingr<8)//right-upper diaginal
  {
	 if(board[j][kingc+j-kingr]==SQUARE)
	   {
        j++; continue;
       }
	 if(board[j][kingc+j-kingr]*p==BBISHOP || board[j][kingc+j-kingr]*p==BQUEEN)
		return 1;
	 break;
  }
  j=kingr+1;
  while(j<8 && kingc-j+kingr>-1)//left-upper diaginal
  {
	 if(board[j][kingc-j+kingr]==SQUARE)
	   {
        j++; continue;
       }
	 if(board[j][kingc-j+kingr]*p==BBISHOP || board[j][kingc-j+kingr]*p==BQUEEN)
		return 1;
	 break;
  }
  j=kingr-1;
  while(j>-1 && kingc+j-kingr>-1)//left-bottom diaginal
  {
	 if(board[j][kingc+j-kingr]==SQUARE)
	   {
        j--; continue;
       }
	 if(board[j][kingc+j-kingr]*p==BBISHOP || board[j][kingc+j-kingr]*p==BQUEEN)
		return 1;
	 break;
  }
  j=kingr-1;
  while(j>-1 && kingc-j+kingr<8)//right-bottom diaginal
  {
     if(board[j][kingc-j+kingr]==SQUARE)
	   {
        j--; continue;
       }
	 if(board[j][kingc-j+kingr]*p==BBISHOP || board[j][kingc-j+kingr]*p==BQUEEN)
		return 1;
	 break;
  }
  if(kingr+p<7 && kingr+p>0) //to validate the pawn option
  {
      if(kingc+1<8 && board[kingr+p][kingc+1]*p==BPAWN)
        return 1;
      if(kingc-1>-1 && board[kingr+p][kingc+1]*p==BPAWN)
        return 1;
  }
  for(i=kingr-1;i<=kingr+1;i++)
    for(j=kingc-1;j<=kingc+1;j++)
  {
      if(i<0 || i>7 || j<0 || j>7) continue;
      if(board[i][j]*p==BKING) return 1;
  }
  return 0;//all the attacked are protected or not there
}
